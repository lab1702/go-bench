name: Release Build

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    name: Build and Upload Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: go-bench
            asset_name: go-bench-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_name: go-bench
            asset_name: go-bench-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: go-bench
            asset_name: go-bench-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: go-bench
            asset_name: go-bench-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: go-bench.exe
            asset_name: go-bench-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            binary_name: go-bench.exe
            asset_name: go-bench-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -ldflags="-s -w" -o ${{ matrix.binary_name }} .

      - name: Compress binary (Unix)
        if: matrix.goos != 'windows'
        run: |
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}

      - name: Compress binary (Windows)
        if: matrix.goos == 'windows'
        shell: pwsh
        run: |
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ${{ matrix.asset_name }}.zip

      - name: Upload Release Asset (Unix)
        if: matrix.goos != 'windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.goos == 'windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip